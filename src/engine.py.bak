import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader

def train_model(model, train_dataset, batch_size, num_epochs, learning_rate):
    # Definir o otimizador e a função de perda
    optimizer = optim.Adam(model.parameters(), lr=learning_rate)
    criterion = nn.CrossEntropyLoss()

    # Criar o DataLoader para carregar os dados de treino em lotes
    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)

    # Laço de treinamento
    for epoch in range(num_epochs):
        running_loss = 0.0
        for i, data in enumerate(train_loader, 0):
            # Obter as entradas e as saídas esperadas do lote atual
            inputs, labels = data

            # Zerar os gradientes dos parâmetros do modelo
            optimizer.zero_grad()

            # Passar as entradas pelo modelo para obter as saídas
            outputs = model(inputs)

            # Calcular a perda para o lote atual
            loss = criterion(outputs, labels)

            # Calcular os gradientes da perda em relação aos parâmetros do modelo
            loss.backward()

            # Atualizar os parâmetros do modelo
            optimizer.step()

            # Acumular a perda para exibir estatísticas ao final do época
            running_loss += loss.item()

        # Exibir as estatísticas ao final de cada época
        print('[Epoch %d] loss: %.3f' % (epoch + 1, running_loss / len(train_loader)))

    # Salvar os pesos do modelo
    torch.save(model.state_dict(), 'pesos/model.pth')

def test_model(model, test_loader, device):
    """
    Testa um modelo em um conjunto de dados de teste.

    Args:
        model: modelo treinado a ser testado.
        test_loader: dataloader contendo o conjunto de dados de teste.
        device: dispositivo (CPU ou GPU) onde o modelo será executado.

    Retorna:
        Tuple contendo a acurácia média do modelo e as previsões do modelo para todo o conjunto de teste.
    """
    model.eval()
    test_loss = 0
    correct = 0
    predictions = []
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item()  # sum up batch loss
            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()
            predictions += pred.cpu().numpy().tolist()
    
    test_loss /= len(test_loader.dataset)
    accuracy = 100. * correct / len(test_loader.dataset)
    return accuracy, predictions

def train_one_epoch(model, optimizer, data_loader, device, epoch, print_freq):
    model.train()
    metric_logger = utils.MetricLogger(delimiter="  ")
    metric_logger.add_meter('lr', utils.SmoothedValue(window_size=1, fmt='{value:.6f}'))
    header = 'Epoch: [{}]'.format(epoch)

    for images, targets in metric_logger.log_every(data_loader, print_freq, header):
        images = list(image.to(device) for image in images)
        targets = [{k: v.to(device) for k, v in t.items()} for t in targets]

        loss_dict = model(images, targets)

        losses = sum(loss for loss in loss_dict.values())

        # reduce losses over all GPUs for logging purposes
        loss_dict_reduced = utils.reduce_dict(loss_dict)
        losses_reduced = sum(loss for loss in loss_dict_reduced.values())

        optimizer.zero_grad()
        losses.backward()
        optimizer.step()

        metric_logger.update(loss=losses_reduced, **loss_dict_reduced)
        metric_logger.update(lr=optimizer.param_groups[0]["lr"])